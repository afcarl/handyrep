# -------------------------------------------
# Simple PostgreSQL Configuration File v. 9.3
# For HandyRep Testing
# -------------------------------------------

# The settings below are appropriate for doing
# a replication demo on a laptop.  They are
# not suitable for production use.

# CONNECTIONS

listen_addresses = '*'
max_connections = 20
port = 5432

# RESOURCES

shared_buffers = 32MB
work_mem = 1MB
maintenance_work_mem = 2MB

# WAL SETTINGS (non-replication)

checkpoint_segments = 4
checkpoint_completion_target = 0.0

# ============================================
# Replication Settings
# ============================================

# The settings below control replication
# These are the ones you will manipulate in this
# tutorial.

# MASTER
# these settings apply only to the master server
# they will be ignored on non-cascading replicas

# use replication level of logging
# required
wal_level = hot_standby

# number of replication connections to support
# pg_basebackup requires 2-3
# good rule is:
# ( planned_replicas X 2 ) + 3
# note that cascading replicas need this too
max_wal_senders = 7

# number of transaction log segments to keep
# in case replicas need them to catch up
# generally you want 1 hour to 12 hours of
# logs, depending on how big that is
wal_keep_segments = 6

# keepalive for the walsender, so that we know if
# the replica has vanished, even if we have no
# data to send.
wal_sender_timeout = 15s

# delay VACUUM runs so that we don't cause query lag
vacuum_defer_cleanup_age = 0

# SYNCHRONOUS REPLICATION

# list of appnames of connections which are
# synchornous standbys.  The list is in priority
# order.
# synchronous_standby_names = ''

# ARCHIVING
# controls file-based archiving of transaction logs

# are we using WAL archiving?  Note that turning
# this setting on requires a restart
# archive_mode = on

# if we are archiving, what script do we call?
# use a script here, NOT just "cp"
# archive_command = '/setup/postgres/archive_logs.sh %p %f'

# if we are archiving, we also want to force a
# file to be written every so often even if there's
# not enough data.
# archive_timeout = 30s

# REPLICA
# replica settings are ignored on the master and only
# used on the replica

# are we accepting read-only queries while being
# replicated to?
hot_standby = on

# maximum delay on before applying updates from the
# master and cancelling queries, for each replication
# method
max_standby_streaming_delay = 30s
max_standby_archive_delay = 60s

# whether to send messages about snapshot visibility
# to the master, to delay vacuum and limit query cancel
# turn it on for synch replication.
hot_standby_feedback = off

# keepalive for the walreceiver, so that we know when
# the master has gone offline
wal_receiver_timeout = 60s

# ===============================================



# LOGGING SETTINGS

# These settings control logging
# so that you can check how replication is going.

log_destination = 'csvlog'
logging_collector = on
log_directory = '/var/log/postgresql/'
log_filename = 'postgresql'
log_truncate_on_rotation = on
log_connections = on

# File Locations
# --------------
# configured for demo
# these have been changed from the standard PostgreSQL file
# locations on Ubuntu

external_pid_file = '/var/run/postgresql/9.3-main.pid'
unix_socket_directories = '/var/run/postgresql'


